# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI/CD github Actions & Docker

on:
  push:
    branches: [ "prac/dev" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
    # JDK setting - github actions에서 사용할 JDK 설정 (aws 과 project의 java 버전과 별도로 관리)
    - uses: actions/checkout@v3
      with:
          token: ${{ secrets.ACTION_TOKEN }}
          submodules: true
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    ## gradle caching (빌드 시간 줄이기)
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # gradle chmod
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # gradle build
    - name: Build with Gradle
      run: ./gradlew bootJar

      # docker login
    - name: Docker Hub Login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # docker build & push to production
    - name: Build Docker image
      run: |
        docker build -t hiyen/prac .

    - name: Push Docker image
      run: docker push hiyen/prac

    ## deploy to develop
    - name: Deploy
      uses: appleboy/ssh-action@master
      id: deploy-dev
      if: contains(github.ref, 'prac/dev')
      with:
        host: ${{ secrets.HOST_DEV }} # EC2 퍼블릭 IPv4 DNS
        username: ${{ secrets.USERNAME }} # ubuntu
        port: 22
        key: ${{ secrets.PRIVATE_KEY }}
        script: |
          sudo docker stop tickitecking || true
          sudo docker rm tickitecking || true
          sudo docker pull hiyen/prac
          sudo docker run -d -p 8080:8080 --name tickitecking hiyen/prac
